using System;
using System.Linq;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<string> names = new List<string> { "Alice", "Bob", "Charlie", "David" };

        // Sorting names in ascending order
        var sortedNames = names.OrderBy(name => name);

        Console.WriteLine("Sorted Names: " + string.Join(", ", sortedNames));
    }
}
 output:-
Sorted Names: Alice, Bob, Charlie, David
-------------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        // Using LINQ extension method Where()
        var evenNumbers = numbers.Where(n => n % 2 == 0);

        Console.WriteLine("Even Numbers: " + string.Join(", ", evenNumbers));
    }
}

output:-
Even Numbers: 2, 4, 6, 8, 10
------------------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;

class Employee
{
    public string Name { get; set; }
    public string Department { get; set; }
    public int Salary { get; set; }
}

class Program
{
    static void Main()
    {
        List<Employee> employees = new List<Employee>
        {
            new Employee { Name = "Alice", Department = "HR", Salary = 60000 },
            new Employee { Name = "Bob", Department = "IT", Salary = 80000 },
            new Employee { Name = "Charlie", Department = "IT", Salary = 70000 },
            new Employee { Name = "David", Department = "Finance", Salary = 55000 },
            new Employee { Name = "Eve", Department = "IT", Salary = 90000 }
        };

        // Applying multiple LINQ extension methods in a single query
        var result = employees
            .Where(e => e.Department == "IT")      // Filtering: Only IT employees
            .OrderByDescending(e => e.Salary)      // Sorting: By highest salary first
            .Select(e => new { e.Name, e.Salary }) // Projection: Selecting only Name & Salary
            .Take(2);                              // Limiting: Only top 2 highest-paid employees

        // Displaying the results
        Console.WriteLine("Top 2 highest-paid IT employees:");
        foreach (var emp in result)
        {
            Console.WriteLine($"Name: {emp.Name}, Salary: ${emp.Salary}");
        }

        // Aggregation Example: Calculating total salary of all IT employees
        var totalSalary = employees
            .Where(e => e.Department == "IT")
            .Sum(e => e.Salary);

        Console.WriteLine($"Total IT Department Salary: ${totalSalary}");
    }
}
-----------------------------------------------------------------------------------


Types of LINQ Extension Methods
1. Filtering Methods
Where()
Distinct()
Take()
Skip()
TakeWhile()
SkipWhile()
2. Projection (Transforming) Methods
Select()
SelectMany()
3. Sorting Methods
OrderBy()
OrderByDescending()
ThenBy()
ThenByDescending()
Reverse()
4. Grouping Methods
GroupBy()
ToLookup()
5. Aggregation Methods
Count()
Sum()
Average()
Min()
Max()
6. Joining Methods
Join()
GroupJoin()
7. Set Methods (Distinct Operations)
Distinct()
Union()
Intersect()
Except()
8. Quantifier Methods (Check Conditions)
All()
Any()
Contains()
9. Element Operators (Retrieve Specific Elements)
First()
FirstOrDefault()
Last()
LastOrDefault()
Single()
SingleOrDefault()
ElementAt()
ElementAtOrDefault()
10. Concatenation Methods
Concat()
11. Conversion Methods
ToList()
ToArray()
ToDictionary()
ToLookup()
12. Partitioning Methods
Take()
TakeWhile()
Skip()
SkipWhile()
13. Generation Methods
Empty()
Range()
Repeat()
14. Equality Methods
SequenceEqual()